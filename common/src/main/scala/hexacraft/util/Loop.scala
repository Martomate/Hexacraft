package hexacraft.util

/** This module contains inline functions used to flatten the generated byte code.
  *
  * Regular for-loops in Scala are typically translated into a function call, and not a simple while loop.
  * This can sometimes cause performance issues, especially in tight loops.
  */
object Loop {
  inline def rangeUntil(from: Int, until: Int)(inline f: Int => Unit): Unit = {
    var i = from
    while i < until do {
      f(i)
      i += 1
    }
  }

  inline def rangeTo(from: Int, to: Int)(inline f: Int => Unit): Unit = {
    var i = from
    while i <= to do {
      f(i)
      i += 1
    }
  }

  inline def array[T](arr: collection.IndexedSeq[T])(inline f: T => Unit): Unit = {
    val len = arr.length
    var i = 0
    while i < len do {
      val v = arr(i)
      f(v)
      i += 1
    }
  }

  inline def iterate[T](it: Iterator[T])(inline f: T => Unit): Unit = {
    while it.hasNext do {
      f(it.next)
    }
  }
}
