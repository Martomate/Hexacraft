package build

import $ivy.`io.github.hoangmaihuy::mill-universal-packager::0.1.4`
import io.github.hoangmaihuy.mill.packager.archetypes.JavaAppPackagingModule
import io.github.hoangmaihuy.mill.packager.subPathRw
import mill._
import mill.api.MillException
import mill.scalalib._
import mill.util.{JarManifest, Jvm}
import os.{Path, RelPath}

import scala.util.Properties.isMac

val HexacraftVersion = "0.15"

object Deps {
  def scalaVersion = "3.6.4"

  private object versions {
    val lwjgl = "3.3.5"
    val joml = "1.10.7"
    val zeromq = "0.6.0"
  }

  private def lwjglDependency(name: String) = {
    val platforms = Seq(
      "natives-windows",
      "natives-windows-arm64",
      "natives-linux",
      "natives-linux-arm64",
      "natives-macos",
      "natives-macos-arm64"
    )

    val base = ivy"org.lwjgl:$name:${versions.lwjgl}"
    val natives = platforms.map(p => ivy"org.lwjgl:$name:${versions.lwjgl};classifier=$p")
    base +: natives
  }

  lazy val LwjglSystem = lwjglDependency("lwjgl")
  lazy val LwjglGlfw = lwjglDependency("lwjgl-glfw")
  lazy val LwjglOpenGL = lwjglDependency("lwjgl-opengl")
  lazy val LwjglOpenAL = lwjglDependency("lwjgl-openal")
  lazy val LwjglStb = lwjglDependency("lwjgl-stb")

  lazy val Joml = ivy"org.joml:joml:${versions.joml}"
  lazy val FlowNbt = ivy"com.flowpowered:flow-nbt:1.0.0"
  lazy val ZeroMQ = ivy"org.zeromq:jeromq:${versions.zeromq}"

  lazy val MUnit = ivy"org.scalameta::munit:1.0.0"
  lazy val Mockito = ivy"org.scalatestplus::mockito-5-8:3.2.17.0"
  lazy val ArchUnit = Seq(
    ivy"com.tngtech.archunit:archunit:1.3.0",
    ivy"org.slf4j:slf4j-nop:2.0.13" // Needed for ArchUnit
  )
}

object common extends HexacraftModule {
  override def moduleDeps = super.moduleDeps ++ Seq(native)
  override def ivyDeps = super.ivyDeps() ++ Agg(
    Deps.Joml, Deps.FlowNbt
  )

  object test extends Tests
}

object native extends HexacraftModule with RustJniModule {
  override def nativeName = "hexacraft-rs"

  override def rustSourcePaths: Seq[RelPath] = {
    Seq(
      os.rel / "src",
      os.rel / "Cargo.toml",
      os.rel / "Cargo.lock",
    )
  }

  object test extends Tests
}

object window extends HexacraftModule {
  override def moduleDeps = Seq(common)

  override def ivyDeps = super.ivyDeps() ++ Agg(
    Deps.LwjglGlfw: _*
  )

  object test extends Tests
}

object audio extends HexacraftModule {
  override def moduleDeps = Seq(common, fs)

  override def ivyDeps = super.ivyDeps() ++ Agg(
    Deps.LwjglOpenAL ++ Deps.LwjglStb: _*
  )

  object test extends Tests
}

object fs extends HexacraftModule {
  override def moduleDeps = Seq(common)

  object test extends Tests
}

object gpu extends HexacraftModule {
  override def moduleDeps = Seq(common, native)

  override def ivyDeps = super.ivyDeps() ++ Agg(
    Deps.LwjglOpenGL: _*
  )

  object test extends Tests
}

object game extends HexacraftModule {
  override def moduleDeps = Seq(common, window, fs)

  override def ivyDeps = super.ivyDeps() ++ Agg(
    Seq(Deps.Joml, Deps.ZeroMQ) ++ Deps.LwjglSystem: _*
  )

  object test extends Tests {
    override def ivyDeps = super.ivyDeps() ++ Agg(
      Deps.Mockito
    )
  }
}

object client extends HexacraftModule {
  override def moduleDeps = Seq(game, audio, gpu)

  override def ivyDeps = super.ivyDeps() ++ Agg(
    Seq(Deps.Joml, Deps.ZeroMQ) ++ Deps.LwjglSystem: _*
  )

  object test extends Tests
}

object server extends HexacraftModule {
  override def moduleDeps = Seq(game)

  override def ivyDeps = super.ivyDeps() ++ Agg(
    Seq(Deps.Joml, Deps.ZeroMQ) ++ Deps.LwjglSystem: _*
  )

  object test extends Tests {
    override def moduleDeps = super.moduleDeps ++ Seq(game.test)
  }
}

object main extends HexacraftModule with JavaAppPackagingModule {
  override def moduleDeps = Seq(game, client, server)

  override def ivyDeps = super.ivyDeps() ++ Agg(
    Seq(Deps.Joml, Deps.ZeroMQ) ++ Deps.LwjglSystem: _*
  )

  def jdepsModules: T[String] = Task {
    val classPath = runClasspath().map(_.path).filter(os.exists).map(_.toString)
    val res = os.proc(
      Seq(
        Jvm.jdkTool("jdeps", this.zincWorker().javaHome().map(_.path)),
        "--multi-release", "17",
        "-R",
        "--print-module-deps",
        "--ignore-missing-deps",
        "--class-path",
      ) ++
      classPath,
    ).call()

    new String(res.out.bytes).stripSuffix("\n").stripSuffix("\r")
  }

  def jlinkAppImage: T[PathRef] = Task {
    val modules = jdepsModules()
    val outputPath = Task.dest / "runtime"

    Task.log.info(s"Creating Java runtime based on [$modules]")

    val args = Seq(
      Jvm.jdkTool("jlink", this.zincWorker().javaHome().map(_.path)),
      "--add-modules",
      modules,
      "--output",
      outputPath.toString,
      "--compress",
      "2",
      "--no-header-files",
      "--no-man-pages",
      "--strip-debug"
    )
    os.proc(args).call()

    PathRef(outputPath)
  }

  override def forkArgs = super.forkArgs() ++ (if (isMac) Some("-XstartOnFirstThread") else None).toSeq

  override def packageVersion = HexacraftVersion
  override def packageName = "hexacraft-" + packageVersion()
  override def executableScriptName = "hexacraft"

  def launcherJarManifest = T {
    JarManifest.MillDefault
      .add("Main-Class" -> finalMainClass())
      .add("Class-Path" -> scriptClasspath().map(name => s"lib/$name").mkString(" "))
  }

  def launcherJar = T {
    Jvm.createJar(Agg(), launcherJarManifest())
  }

  override def universalMappings = T {
    val launcherJarPath = launcherJar().path
    val launcherJarMapping = PathRef(launcherJarPath) -> (os.sub / "hexacraft-launcher.jar")
    val jreMapping = jlinkAppImage() -> (os.sub / "runtime")

    super.universalMappings().filterNot(_._2.startsWith(os.sub / "bin")) ++ Seq(launcherJarMapping, jreMapping)
  }

  object test extends Tests {
    override def moduleDeps = super.moduleDeps ++ Seq(game.test, client.test)
    override def ivyDeps = super.ivyDeps() ++ Agg(
      Seq(Deps.Mockito) ++ Deps.ArchUnit: _*
    )
  }
}



trait HexacraftModule extends SbtModule {
  def scalaVersion = Deps.scalaVersion

  override def scalacOptions = Seq(
    "-deprecation", "-unchecked", "-feature"
  )
  override def javacOptions = Seq(
    "--release", "17"
  )

  override def compileIvyDeps = Agg(
    ivy"org.scala-lang::scala2-library-tasty-experimental:${scalaVersion()}"
  )

  override def artifactName = "hexacraft-" + super.artifactName()

  trait Tests extends SbtTests with TestModule.Munit {
    override def ivyDeps = super.ivyDeps() ++ Agg(
      Deps.MUnit
    )
  }
}

trait RustJniModule extends JavaModule {
  /** Name used in Cargo.toml [package].name. */
  protected def nativeName: String

  /** Paths to consider when determining if a rebuild is needed */
  protected def rustSourcePaths: Seq[RelPath]

  /** Directory where the JNI headers will be stored */
  private def jniHeadersDir: Target[Path] = T {
    val sourceHash = allSources().map(_.sig).sum
    T.dest / s"headers-$sourceHash"
  }

  override def javacOptions =
    super.javacOptions() :+ "-h" :+ jniHeadersDir().toString

  /** Directory with the JNI headers, automatically regenerated when needed */
  def jniHeaders: Target[PathRef] = T {
    compile()

    val headersDir = jniHeadersDir()
    if (os.list(headersDir).isEmpty) {
      throw new MillException("No JNI headers were generated. Please do a clean build.")
    }

    PathRef(headersDir)
  }

  def crateHome = millSourcePath / "src" / "native"

  private def rustSources = Task.Sources {
    rustSourcePaths.map(f => PathRef(crateHome / f))
  }

  override def compileResources = Task.Sources {
    super.compileResources() :+ compileNative()
  }

  override def resources = T {
    checkJni()
    super.resources()
  }

  private val localTarget: String = {
    System.getProperty("os.name").toLowerCase match {
      case os if os.contains("windows") =>
        System.getProperty("os.arch") match {
          case arch if arch.trim == "aarch64" =>
            throw new IllegalArgumentException("Arm on Windows is not yet supported")
          case _ => "x86_64-pc-windows-msvc"
        }
      case os if os.startsWith("mac") =>
        System.getProperty("os.arch") match {
          case arch if arch.trim == "aarch64" => "aarch64-apple-darwin"
          case _ => "x86_64-apple-darwin"
        }
      case _ =>
        System.getProperty("os.arch") match {
          case arch if arch.trim == "aarch64" => "aarch64-unknown-linux-gnu"
          case _ => "x86_64-unknown-linux-gnu"
        }
    }
  }

  private def getNativeLibName(target: String, libraryName: String): String = target match {
    case _: String if target.contains("windows") => libraryName + ".dll"
    case _: String if target.contains("linux") => "lib" + libraryName + ".so"
    case _: String if target.contains("apple") => "lib" + libraryName + ".dylib"
    case _ => throw new IllegalArgumentException(s"Rust target $target not supported")
  }

  def compileNative = T {
    rustSources() // recompile if the sources have changed

    val libName = nativeName
    val target = localTarget

    val compilation = Task.fork.async(Task.dest / "cargo", "cargo", s"Compiling $libName ($target)") { _ =>
      val outputFolder = compileRust(crateHome, target)
      outputFolder / getNativeLibName(target, libName.replace('-', '_'))
    }
    val libFile = Task.fork.await(compilation)
    val libDestPath = getNativeLibEmbedPath(libName, target)

    val resultDir = T.dest / "embed"
    os.copy(libFile, resultDir / libDestPath, replaceExisting = true, createFolders = true)
    PathRef(resultDir)
  }

  protected def compileRust(crateHome: os.Path, target: String): os.Path = {
    os.proc("cargo", "build", "--release", "--target", target).call(cwd = crateHome)

    crateHome / "target" / target / "release"
  }

  private def getNativeLibEmbedPath(nativeName: String, target: String): os.SubPath = {
    val osName = target match {
      case t if t.contains("windows") => "windows"
      case t if t.contains("apple") => "darwin"
      case t if t.contains("linux") => "linux"
      case _ => throw new IllegalArgumentException(s"Could not extract os from target: $target")
    }
    val archName = target match {
      case t if t.contains("aarch64") => "arm64"
      case t if t.contains("x86_64") => "x86_64"
      case _ => throw new IllegalArgumentException(s"Could not extract arch from target: $target")
    }

    val targetShortName = s"$archName-$osName"
    val libFileName = getNativeLibName(target, nativeName.replace('-', '_'))

    os.sub / "native" / targetShortName / libFileName
  }

  def checkJni: Target[Unit] = T {
    T.log.info("Checking JNI")
    val declarations = jniDeclarationsInHeaders().map(JniFunctionDeclaration.parseFromHeader)
    val exportedFunctionNames = jniFunctionNamesInRust()

    val result = JniCheckResult(
      extraJniExports = exportedFunctionNames.filter(name => !declarations.exists(_.mangledName == name)),
      missingJniDeclarations = declarations.filter(d => !exportedFunctionNames.contains(d.mangledName))
    )

    if (result.isMismatch) {
      result.print()
      throw new MillException("JNI mismatch (see details above)")
    }
    T.log.info(s"Found ${declarations.size} JNI functions")
  }

  private def jniDeclarationsInHeaders: Target[Seq[String]] = T {
    os.list(jniHeaders().path)
      .map(os.read.lines)
      .flatMap(JniExtractors.functionDeclarationsInHeaderFile)
  }

  private def jniFunctionNamesInRust: Target[Seq[String]] = T {
    val p = os.proc("cargo", "expand").call(cwd = crateHome)
    JniExtractors.functionNamesInRustCode(new String(p.out.bytes))
  }
}

object JniExtractors {
  def functionDeclarationsInHeaderFile(headerFileLines: Seq[String]): Seq[String] = {
    var declarations: List[String] = Nil
    var funcStr: Option[String] = None
    for (l <- headerFileLines) {
      funcStr match {
        case Some(s) =>
          if (!l.endsWith(";")) {
            funcStr = Some(s"$s $l")
          } else {
            declarations = s"$s ${l.stripSuffix(";")}" :: declarations
            funcStr = None
          }
        case None =>
          if (l.startsWith("JNIEXPORT")) {
            funcStr = Some(l)
          }
      }
    }
    declarations.reverse
  }

  def functionNamesInRustCode(expandedSourceCode: String): Seq[String] = {
    """pub extern "system" fn (Java_[^<]*)""".r
      .findAllMatchIn(expandedSourceCode)
      .map(_.group(1))
      .toSeq
  }
}

case class JniCheckResult(extraJniExports: Seq[String], missingJniDeclarations: Seq[JniFunctionDeclaration]) {
  def isMismatch: Boolean = missingJniDeclarations.nonEmpty

  def print(): Unit = {
    if (extraJniExports.nonEmpty) {
      println()
      println(s"Extra JNI exports:\n${extraJniExports.map(name => s"    $name").mkString("\n")}")
    }

    if (missingJniDeclarations.nonEmpty) {
      println()
      println(s"Missing JNI exports:")
      for (d <- missingJniDeclarations) {
        println(s"    ${d.mangledName}")
      }

      println()
      println("Example declarations for the missing JNI exports:")

      for (d <- missingJniDeclarations) {
        println(d.declarationExample)
      }
    }
  }
}

case class JniFunctionDeclaration(returnType: String, mangledName: String, argTypes: Seq[String]) {
  def demangledName: (String, String) = {
    val namespaceLength = "_".r.findAllMatchIn(mangledName).map(_.start).toSeq.findLast { idx =>
      val rest = mangledName.substring(idx)
      !rest.startsWith("_1") && !rest.startsWith("_00024")
    }.get

    val namespace = mangledName.substring(0, namespaceLength)
      .stripPrefix("Java_")
      .replace("_1", "_")
      .replace("_00024", "$")
      .replace("_", ".")

    val function = mangledName.substring(namespaceLength + 1)
      .replace("_1", "_")

    (namespace, function)
  }

  def declarationExample: String = {
    val (namespace, function) = demangledName
    val args = argTypes.drop(1).zipWithIndex.map {
      case (t, i) => (s"p${i + 1}", rustJniArgName(t))
    }

    s"""
       |#[jni_fn("$namespace")]
       |pub fn $function<'local>(
       |    env: JNIEnv<'local>,
       |${args.map { case (n, t) => s"    $n: $t," }.mkString("\n")}
       |) -> $returnType
       |""".stripMargin
  }

  private def rustJniArgName(rawName: String): String = {
    val isRef = rawName == "jclass" || rawName.endsWith("Array")
    if (isRef) rustJniRefTypeName(rawName) else rawName
  }

  private def rustJniRefTypeName(name: String): String = {
    val capitalLetter = (name.charAt(1) - 'a' + 'A').toChar
    s"J$capitalLetter${name.substring(2)}<'local>"
  }
}

object JniFunctionDeclaration {
  def parseFromHeader(s: String): JniFunctionDeclaration = {
    val a = """JNIEXPORT (?<returnType>\w+) JNICALL (?<mangledName>\w+)\s+\((?<argsStr>.*?)\)""".r
      .findFirstMatchIn(s)
      .getOrElse(throw new RuntimeException(s"Could not parse jni function declaration:\n\t$s"))

    JniFunctionDeclaration(
      returnType = a.group("returnType"),
      mangledName = a.group("mangledName"),
      argTypes = a.group("argsStr").split(",").toSeq.map(_.strip)
    )
  }
}
